package vn.com.picon.controller;

import jakarta.mail.MessagingException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.ByteArrayResource;
import org.springframework.core.io.InputStreamSource;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import vn.com.picon.service.EmailService;

import java.io.IOException;
import java.util.Map;

@RestController
@RequestMapping("/picon/mail")
public class EmailController {

    @GetMapping("/")
    public String handleContactSubmission() { // T√™n h√†m n√†y c√≥ v·∫ª kh√¥ng kh·ªõp v·ªõi ch·ª©c nƒÉng GET "/"
        return "/test.html"; // C√≥ th·ªÉ b·∫°n mu·ªën tr·∫£ v·ªÅ m·ªôt trang tƒ©nh ho·∫∑c th√¥ng tin g√¨ ƒë√≥
    }

    @Autowired
    private EmailService emailService;

    @PostMapping("/contact")
    public ResponseEntity<Map<String, String>> handleContactSubmission(
            @RequestBody Map<String, String> request) {
        String name = request.get("name");
        String email = request.get("email");
        String message = request.get("message");

        System.out.println("üì¨ Received CONTACT request: " + request);
        if (name == null || name.isBlank() || email == null || email.isBlank() || message == null || message.isBlank()) {
            System.out.println("‚ö†Ô∏è Invalid contact data: " + request);
            return ResponseEntity.badRequest().body(Map.of("message", "Vui l√≤ng cung c·∫•p ƒë·∫ßy ƒë·ªß T√™n, Email v√† Tin nh·∫Øn."));
        }

        try {
            emailService.sendContactEmail(name, email, message);
            return ResponseEntity.ok(Map.of("message", "G·ª≠i li√™n h·ªá th√†nh c√¥ng!"));
        } catch (MessagingException e) {
            System.err.println("‚ùå Error sending contact email: " + e.getMessage());
            e.printStackTrace(); // Th√™m ƒë·ªÉ xem chi ti·∫øt l·ªói
            return ResponseEntity.internalServerError().body(Map.of("message", "L·ªói g·ª≠i email li√™n h·ªá."));
        }
    }

    @PostMapping("/application")
    public ResponseEntity<Map<String, String>> handleApplicationSubmission(
            @RequestPart("name") String name,
            @RequestPart("email") String email,
            @RequestPart(value = "phone", required = false) String phone,
            @RequestPart(value = "message", required = false) String message,
            @RequestPart(value = "cvFile", required = false) MultipartFile cvFile) {

        System.out.println("üì¨ Received APPLICATION request. Name: " + name + ", Email: " + email + ", CV: " + (cvFile != null && !cvFile.isEmpty() ? cvFile.getOriginalFilename() : "N/A"));

        if (name == null || name.isBlank() || email == null || email.isBlank()) {
            System.out.println("‚ö†Ô∏è Invalid application data (missing name or email).");
            return ResponseEntity.badRequest().body(Map.of("message", "Vui l√≤ng cung c·∫•p T√™n v√† Email."));
        }

        InputStreamSource cvAttachmentSource = null; // ƒê·ªïi t√™n ƒë·ªÉ r√µ r√†ng
        String actualCvFileName = null;       // ƒê·ªïi t√™n ƒë·ªÉ r√µ r√†ng

        if (cvFile != null && !cvFile.isEmpty()) {
            try {
                cvAttachmentSource = new ByteArrayResource(cvFile.getBytes());
                actualCvFileName = cvFile.getOriginalFilename();
                // C√¢n nh·∫Øc l√†m s·∫°ch t√™n file ·ªü ƒë√¢y n·∫øu c·∫ßn, v√≠ d·ª•:
                if (actualCvFileName != null) {
                    actualCvFileName = actualCvFileName.replaceAll("[^a-zA-Z0-9.\\-_]", "_");
                }
                System.out.println("Received CV file: " + actualCvFileName + ", size: " + cvFile.getSize());
            } catch (IOException e) {
                System.err.println("‚ùå Error reading uploaded CV file: " + e.getMessage());
                e.printStackTrace(); // Th√™m ƒë·ªÉ xem chi ti·∫øt l·ªói
                return ResponseEntity.internalServerError().body(Map.of("message", "L·ªói x·ª≠ l√Ω file CV t·∫£i l√™n."));
            }
        }

        try {
            // S·ª¨A L·∫†I D√íNG N√ÄY: Truy·ªÅn ƒë√∫ng c√°c tham s·ªë ƒë√£ chu·∫©n b·ªã
            emailService.sendApplicationEmail(name, email, phone, message, cvAttachmentSource, actualCvFileName);
            return ResponseEntity.ok(Map.of("message", "H·ªì s∆° ·ª©ng tuy·ªÉn c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng!"));
        } catch (MessagingException e) {
            System.err.println("‚ùå Error sending application email: " + e.getMessage());
            e.printStackTrace(); // Th√™m ƒë·ªÉ xem chi ti·∫øt l·ªói
            return ResponseEntity.internalServerError().body(Map.of("message", "L·ªói h·ªá th·ªëng khi g·ª≠i h·ªì s∆° ·ª©ng tuy·ªÉn."));
        } catch (Exception e) { // B·∫Øt c√°c l·ªói kh√°c c√≥ th·ªÉ x·∫£y ra
            System.err.println("‚ùå Unknown error processing application: " + e.getMessage());
            e.printStackTrace(); // Th√™m ƒë·ªÉ xem chi ti·∫øt l·ªói
            return ResponseEntity.internalServerError().body(Map.of("message", "L·ªói kh√¥ng x√°c ƒë·ªãnh trong qu√° tr√¨nh x·ª≠ l√Ω."));
        }
    }
}
